
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /profiles/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
    }

    match /chats/{chatId} {
      // A user can read (get/list) or write to a chat doc if they are a participant.
      // For list operations, Firestore validates that the client-side query's `where` clause
      // is compatible with this rule. e.g. `where('participants', 'array-contains', auth.uid)`.
      allow read, write: if request.auth.uid in resource.data.participants;

      match /messages/{messageId} {
        
        function isParentChatParticipant() {
          // It's safe to use get() here because chatId is bound from the path.
          // We check for existence first to prevent errors on the first message of a new chat.
          return exists(/databases/$(database)/documents/chats/$(chatId)) &&
                 request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        }

        // Allow reading messages (get, list) if the user is a participant in the chat.
        allow read: if isParentChatParticipant();

        // Allow creating a message if the user is the sender AND a participant in the chat.
        allow create: if request.resource.data.senderId == request.auth.uid && isParentChatParticipant();

        // Disallow updating or deleting messages to preserve history.
        allow update, delete: if false;
      }
    }
  }
}
