
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Profiles can be read by any authenticated user
    // but only written to by the owner.
    match /profiles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Chat documents
    match /chats/{chatId} {
      // Allow read/update access only to participants of the chat.
      allow read, update: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
      // Allow creation if the participants array contains the requesting user
      // and has exactly two participants. This prevents users from creating chats they are not part of.
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants && request.resource.data.participants.size() == 2;

      // Messages subcollection
      match /messages/{messageId} {
        // Allow read access if the user is a participant in the parent chat document.
        // This checks if the chat document exists before trying to access its data.
        allow read: if isAuthenticated() && exists(/databases/$(database)/documents/chats/$(chatId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Allow message creation if the user is a participant in the chat
        // and the senderId matches their own UID.
        allow create: if isAuthenticated() && exists(/databases/$(database)/documents/chats/$(chatId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
                       request.resource.data.senderId == request.auth.uid;
        
        // Disallow updates and deletes to maintain chat history integrity.
        allow update, delete: if false;
      }
    }
  }
}
