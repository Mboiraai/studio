"use client";

import { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { generateReportFlags, ReportFlagsInput, ReportFlagsOutput } from "@/ai/flows/report-flag-generation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Sparkles, Loader2 } from "lucide-react";

const formSchema = z.object({
  reportText: z.string().min(10, "Report text must be at least 10 characters long."),
  userProfile: z.string().min(10, "User profile must be at least 10 characters long."),
});

export function ModerationForm() {
  const [result, setResult] = useState<ReportFlagsOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      reportText: "This user sent me inappropriate messages and was very rude when I asked them to stop.",
      userProfile: "Username: RudeUser123. Bio: 'Just here for a good time, not a long time. Don't be sensitive.' Joined: 2 days ago.",
    },
  });

  const onSubmit: SubmitHandler<ReportFlagsInput> = async (data) => {
    setIsLoading(true);
    setError(null);
    setResult(null);
    try {
      const response = await generateReportFlags(data);
      setResult(response);
    } catch (e) {
      setError("An error occurred while generating flags. Please try again.");
      console.error(e);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="grid md:grid-cols-2 gap-8">
      <Card>
        <CardHeader>
          <CardTitle>Submit a Report</CardTitle>
          <CardDescription>Enter the report details and the user's profile to generate moderation flags.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="reportText"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Report Text</FormLabel>
                    <FormControl>
                      <Textarea placeholder="The user said..." {...field} rows={5} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="userProfile"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>User Profile Information</FormLabel>
                    <FormControl>
                      <Textarea placeholder="The user's bio says..." {...field} rows={5} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" disabled={isLoading} className="w-full bg-primary-gradient">
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Generate Flags
                  </>
                )}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
      
      <Card className="flex flex-col">
        <CardHeader>
          <CardTitle>AI-Generated Results</CardTitle>
          <CardDescription>Flags and explanation generated by the moderation AI.</CardDescription>
        </CardHeader>
        <CardContent className="flex-1 flex flex-col items-center justify-center">
          {isLoading && (
            <div className="text-center text-muted-foreground">
              <Loader2 className="mx-auto h-8 w-8 animate-spin" />
              <p className="mt-2">AI is analyzing the report...</p>
            </div>
          )}
          {error && <p className="text-destructive">{error}</p>}
          {result && (
            <div className="space-y-4 text-left w-full">
              <div>
                <h3 className="font-semibold mb-2">Generated Flags:</h3>
                <div className="flex flex-wrap gap-2">
                  {result.flags.length > 0 ? (
                    result.flags.map((flag, index) => (
                      <Badge key={index} variant="destructive">{flag}</Badge>
                    ))
                  ) : (
                    <Badge variant="secondary">No Flags Generated</Badge>
                  )}
                </div>
              </div>
              <div>
                <h3 className="font-semibold mb-2">Explanation:</h3>
                <p className="text-sm text-muted-foreground bg-secondary/50 p-3 rounded-md">{result.explanation}</p>
              </div>
            </div>
          )}
          {!isLoading && !result && !error && (
             <div className="text-center text-muted-foreground">
                <Sparkles className="mx-auto h-8 w-8" />
                <p className="mt-2">Results will appear here.</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
